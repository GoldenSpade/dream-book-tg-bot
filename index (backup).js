import { Telegraf, Markup } from 'telegraf'
import 'dotenv/config.js'

import { data } from './data/data.js'
import { splitText } from './helpers/splitText.js'
import { searchItems } from './helpers/searchItems.js'
import { dateFromTimeStamp } from './helpers/dateFromTimeStamp.js'

const bot = new Telegraf(process.env.API_KEY)

const searchResults = new Map()

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const mainMenu = Markup.keyboard([
  ['üîç –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É', '‚ÑπÔ∏è –û –±–æ—Ç–µ', '‚ùì –ü–æ–º–æ—â—å'],
  ['‚òï –ö—É–ø–∏—Ç—å –Ω–∞–º –∫–æ—Ñ–µ'],
]).resize()

bot.start((ctx) => {
  ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–∫—Ç–æ–≤–∞–Ω–∏—è —Å–Ω–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.',
    mainMenu
  )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É"
bot.hears('üîç –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É', (ctx) => {
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–∫—Ç–æ–≤–∞–Ω–∏—è —Å–Ω–∞:')
  // ctx.reply()
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–û –±–æ—Ç–µ"
bot.hears('‚ÑπÔ∏è –û –±–æ—Ç–µ', (ctx) => {
  ctx.reply(
    'üîÆ –°–æ–Ω–Ω–∏–∫ —Å –≥–ª—É–±–æ–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –ø—Ä–∏—Å–Ω–∏–ª–æ—Å—å ‚Äî –∏ —è —Ä–∞—Å—à–∏—Ñ—Ä—É—é —Å–∫—Ä—ã—Ç—ã–µ —Å–º—ã—Å–ª—ã!  '
  )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ü–æ–º–æ—â—å"
bot.hears('‚ùì –ü–æ–º–æ—â—å', (ctx) => {
  ctx.reply(
    '–î–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–∫—Ç–æ–≤–∞–Ω–∏—è —Å–Ω–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª–∏–Ω–æ–π –±–æ–ª–µ–µ 3-—Ö —Å–∏–º–≤–æ–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—É "–µ" –≤–º–µ—Å—Ç–æ "—ë". –í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–æ –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ.'
  )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ö—É–ø–∏—Ç—å –Ω–∞–º –∫–æ—Ñ–µ"
bot.hears('‚òï –ö—É–ø–∏—Ç—å –Ω–∞–º –∫–æ—Ñ–µ', (ctx) => {
  ctx.replyWithHTML(
    '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å, –∫—É–ø–∏–≤ –Ω–∞–º –∫–æ—Ñ–µ <a href="https://google.com">–∑–¥–µ—Å—å</a>.'
  )
})

bot.on('text', async (ctx) => {
  const target = ctx.message.text
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
  if (
    [
      'üîç –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É',
      '‚ÑπÔ∏è –û –±–æ—Ç–µ',
      '‚ùì –ü–æ–º–æ—â—å',
      '‚òï –ö—É–ø–∏—Ç—å –Ω–∞–º –∫–æ—Ñ–µ',
    ].includes(target)
  )
    return

  if (target.length >= 3) {
    const dreams = searchItems(data, target)
    if (Array.isArray(dreams) && dreams.length > 0) {
      const buttons = dreams.map((el, index) =>
        Markup.button.callback(
          el.word,
          `dream_${ctx.message.message_id}_${index}`
        )
      )
      await ctx.reply(
        `–ù–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ${dreams.length}:`,
        Markup.inlineKeyboard(
          [
            ...buttons,
            Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'back_to_menu'),
          ],
          { columns: 2 }
        )
      )
      searchResults.set(ctx.message.message_id, dreams)
      console.log(
        `first_name: ${ctx.message.from.first_name}, username: ${
          ctx.message.from.username
        }, word: ${target}, amount: ${dreams.length}, date: ${dateFromTimeStamp(
          ctx.message.date
        )}`
      )
    } else {
      ctx.reply(
        `–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–∏–º —Å–ª–æ–≤–æ–º. –í–º–µ—Å—Ç–æ –±—É–∫–≤—ã "—ë" –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—É "–µ". –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ.`,
        mainMenu
      )
      console.log(
        `userName: ${ctx.message.from.username}, word: ${target}. –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–∏–º —Å–ª–æ–≤–æ–º.`
      )
    }
  } else {
    ctx.reply(`–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 3-—Ö —Å–∏–º–≤–æ–ª–æ–≤.`, mainMenu)
    console.log(
      `userName: ${ctx.message.from.username}, word: ${target}. –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 3-—Ö —Å–∏–º–≤–æ–ª–æ–≤.`
    )
  }
})

bot.action(/dream_(\d+)_(\d+)/, async (ctx) => {
  const messageId = parseInt(ctx.match[1])
  const index = parseInt(ctx.match[2])
  const dreams = searchResults.get(messageId)
  if (dreams && dreams[index]) {
    const dream = dreams[index]
    const parts = splitText(`${dream.word} \n\n ${dream.description}`, 4096) // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    for (const part of parts) {
      await ctx.reply(part)
    }
  }
  await ctx.answerCbQuery() // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
bot.action('back_to_menu', (ctx) => {
  ctx.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', mainMenu)
  ctx.answerCbQuery() // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
})

bot.launch().then(() => console.log('Started'))

process.once('SIGINT', () => bot.stop('SIGNIN'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))
