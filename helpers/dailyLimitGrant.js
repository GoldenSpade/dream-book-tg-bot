// helpers/dailyLimitGrant.js
import { db } from '../data/db.js'

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–¥–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å –ª–∏–º–∏—Ç, –Ω–∞—á–∏—Å–ª—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö
 * @returns {Array<{ userId: number, chatId: number }>}
 */
function grantDailyLimits() {
  const users = db
    .prepare(
      `
      SELECT userId, chatId FROM Users
      WHERE 
        (premiumSince IS NULL OR datetime(premiumSince) < datetime('now')) AND
        COALESCE("limit", 0) = 0 AND
        COALESCE(refBonus, 0) = 0
    `
    )
    .all()

  for (const user of users) {
    db.prepare(`UPDATE Users SET "limit" = 1 WHERE userId = ?`).run(user.userId)
  }

  console.log(`üéÅ –ù–∞—á–∏—Å–ª–µ–Ω–æ 1 –ª–∏–º–∏—Ç ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`)
  return users
}

/**
 * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ grantDailyLimits() –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
 * @param {Function} notifyFn ‚Äî —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è —Å –º–∞—Å—Å–∏–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
function scheduleDailyLimitGranting(notifyFn, hour = 3, minute = 0) {
  const now = new Date()
  const nextRun = new Date()

  nextRun.setHours(hour, minute, 0, 0)
  if (nextRun <= now) {
    nextRun.setDate(nextRun.getDate() + 1)
  }

  const delay = nextRun - now

  const hours = Math.floor(delay / 1000 / 60 / 60)
  const minutes = Math.floor((delay / 1000 / 60) % 60)

  console.log(
    `üïí –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ ${hours} —á. ${minutes} –º–∏–Ω. (${nextRun.toLocaleString()})`
  )

  setTimeout(() => {
    const grantedUsers = grantDailyLimits()
    notifyFn(grantedUsers)

    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
    setInterval(() => {
      const granted = grantDailyLimits()
      notifyFn(granted)
    }, 24 * 60 * 60 * 1000)
  }, delay)
}

export { scheduleDailyLimitGranting }
