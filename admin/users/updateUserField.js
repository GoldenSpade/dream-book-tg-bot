// –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª—é–±–æ–≥–æ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (—Ç–∞–±–ª. Users)
import readline from 'readline'
import { User } from '../../data/db.js'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–æ—Å–∞
function ask(question) {
  return new Promise((resolve) => {
    rl.question(question, resolve)
  })
}

async function main() {
  try {
    console.log('üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ Users\n')

    const userIdInput = await ask('–í–≤–µ–¥–∏—Ç–µ userId: ')
    const userId = parseInt(userIdInput.trim())

    if (!userId || isNaN(userId)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π userId')
    }

    const field = (await ask('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, isPremium): ')).trim()
    const valueRaw = await ask('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ')
    let value

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø—ã:
    if (valueRaw === 'true') value = 1
    else if (valueRaw === 'false') value = 0
    else if (!isNaN(valueRaw)) value = Number(valueRaw)
    else value = valueRaw

    const result = await User.update(userId, { [field]: value })

    console.log('\n‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:')
    console.log(result)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
  } finally {
    rl.close()
  }
}

main()
