import Database from 'better-sqlite3'
import path from 'path'
import fs from 'fs'
import readline from 'readline'

// –ü—É—Ç—å –∫ –±–∞–∑–µ
const DB_PATH = path.resolve('data', 'database.sqlite')

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã
if (!fs.existsSync(DB_PATH)) {
  console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏:', DB_PATH)
  process.exit(1)
}

// –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–≤–æ–¥–∞
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ ID
function askUserId() {
  rl.question('üÜî –í–≤–µ–¥–∏—Ç–µ userId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ', (input) => {
    const userId = parseInt(input)
    if (isNaN(userId)) {
      console.error('‚ùå –í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π userId. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.')
      rl.close()
      process.exit(1)
    }
    deleteUser(userId)
  })
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
function deleteUser(userId) {
  const db = new Database(DB_PATH)
  try {
    const user = db.prepare('SELECT * FROM Users WHERE userId = ?').get(userId)

    if (!user) {
      console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å userId = ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`)
      rl.close()
      db.close()
      return
    }

    console.log(
      `üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName || '‚Äî'} (@${
        user.userName || '‚Äî'
      })`
    )
    rl.question(
      '‚ùì –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ? (y/n): ',
      (confirm) => {
        if (confirm.toLowerCase() === 'y') {
          const deletedSearches = db
            .prepare('DELETE FROM SearchQueries WHERE userId = ?')
            .run(userId).changes

          const deletedButtons = db
            .prepare('DELETE FROM ButtonActions WHERE userId = ?')
            .run(userId).changes

          const deletedUser = db
            .prepare('DELETE FROM Users WHERE userId = ?')
            .run(userId).changes

          console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ:
  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${deletedUser}
  ‚Ä¢ –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: ${deletedSearches}
  ‚Ä¢ –ù–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫: ${deletedButtons}
        `)
        } else {
          console.log('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        }

        rl.close()
        db.close()
      }
    )
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', err)
    rl.close()
    db.close()
  }
}

askUserId()
