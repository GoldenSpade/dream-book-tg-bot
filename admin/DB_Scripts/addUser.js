import readline from 'readline'
import { User } from '../../data/db.js'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

function ask(question) {
  return new Promise((resolve) => rl.question(question, resolve))
}

async function addUserManually() {
  try {
    console.log('üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:\n')

    const userIdInput = await ask('–í–≤–µ–¥–∏—Ç–µ Telegram userId (—á–∏—Å–ª–æ): ')
    const firstName = await ask('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram (firstName): ')
    const userName = await ask('–í–≤–µ–¥–∏—Ç–µ userName (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º): ')
    const chatIdInput = await ask('–í–≤–µ–¥–∏—Ç–µ chatId (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º): ')
    const language = await ask('–í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ru): ')

    const userId = parseInt(userIdInput.trim())
    const chatId = chatIdInput.trim() ? parseInt(chatIdInput.trim()) : null

    if (!userId || isNaN(userId)) {
      throw new Error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π userId')
    }

    const userData = {
      userId,
      firstName: firstName.trim() || null,
      userName: userName.trim() || null,
      chatId,
      language: language.trim() || null,
    }

    const [user, created] = await User.findOrCreate(userData)

    if (created) {
      console.log(
        `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: ${user.firstName}, ID: ${user.userId}`
      )
    } else {
      console.log(
        `‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${user.firstName}, ID: ${user.userId}`
      )
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err.message)
  } finally {
    rl.close()
  }
}

addUserManually()
